#neural network class definition
class neuralNetwork:
    
    #initialise the neural network
    def __init__(self, inputnodes, hiddennodes, outputnodes,
learningrate):
        
        #set number of nodes in each input, hidden, and output layer
        self.inodes = inputnodes
        self.hnodes = hiddennodes
        self.onodes = outputnodes
        
        #link weigh matrices, wih and who
        self.wih = numpy.random.normal(0.0, pow(self.inodes,
-0.5),(self.hnodes, self.inodes))
        self.who = numpy.random.normal(0.0, pow(self.hnodes,
-0.5),(self.onodes, self.hnodes))
        
       # learning rate
        self.lr = learningrate

        self.activation_function = lambda x:
scipy.special.expit(x)
        
        pass
    
    #train the network
    def train():
        pass
        
    def query(self, inputs_list):
        #convert inputs list to 2d array
        inputs = numpy.array(inputs_list, ndmin=2) .T
        #calculate signals into hidden layer
        hidden_inputs = numpy.dot(self.wih, inputs)
        #calculate the signals emerging from hidden layer
        hidden_outputs =
        self.activation_function(hidden_inputs)
        final_inputs = numpy.dot(self.who, hidden_outputs)
        final_outputs = self.activation_function(final_inputs)
        
        return final_outputs
